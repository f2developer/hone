from fastapi import FastAPI, Request, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import os
import httpx
import re
import difflib
import base64

# Load environment variables
load_dotenv()

# Initialize FastAPI app
app = FastAPI()

# Enable CORS for frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173",
        "http://localhost:5174",
        "https://melodic-treacle-e8fd30.netlify.app",
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# API Keys
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
HF_TOKEN = os.getenv("HF_TOKEN")

# URLs
GEMINI_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent"
SDXL_URL = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"

# ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶æ‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®
identity_patterns_bn = [
    r"‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá (‡¶ï‡ßá|‡¶ï‡¶æ‡¶∞‡¶æ|‡¶ï‡ßá) (‡¶§‡ßà‡¶∞‡¶ø|‡¶¨‡¶æ‡¶®‡¶æ‡¶á‡¶õ‡ßá|‡¶¨‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßá|‡¶¨‡¶®‡¶æ‡¶®‡ßã|‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá|‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßã|‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶≤‡ßã)",
    r"(‡¶§‡ßÅ‡¶Æ‡¶ø|‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá) (‡¶ï‡¶æ‡¶∞|‡¶ï‡¶æ‡¶∞‡¶æ|‡¶ï‡¶æ‡¶¶‡ßá‡¶∞) (‡¶§‡ßà‡¶∞‡¶ø|‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã|‡¶¨‡¶®‡¶æ‡¶®‡ßã|‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá|‡¶¨‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßá)",
    r"‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ (‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶æ‡¶§‡¶æ|‡¶∏‡ßç‡¶∞‡¶∑‡ßç‡¶ü‡¶æ|‡¶§‡ßà‡¶∞‡¶ø‡¶ï‡¶æ‡¶∞‡¶ï|‡¶™‡ßá‡¶õ‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø|‡¶â‡ßé‡¶∏|‡¶â‡ßé‡¶™‡¶§‡ßç‡¶§‡¶ø)",
    r"‡¶§‡ßÅ‡¶Æ‡¶ø (‡¶ï‡¶æ‡¶∞|‡¶ï‡¶æ‡¶∞‡¶æ) (‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶§‡ßà‡¶∞‡¶ø|‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã|‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶∏‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø)",
    r"‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßá ‡¶¨‡¶æ‡¶®‡¶æ‡¶á‡¶õ‡ßá", r"‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ", r"‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßá‡¶õ‡¶®‡ßá ‡¶ï‡ßá ‡¶Ü‡¶õ‡ßá",
    r"‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø", r"‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá",
]

# ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶æ‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®
identity_patterns_en = [
    r"who (created|made|built) you",
    r"your (creator|origin|developer|maker|owner)",
    r"who (are you made by|is your creator|developed you|built you)",
]

# fuzzy match keyword
identity_keywords = [
    "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡ßá ‡¶¨‡¶æ‡¶®‡¶æ‡¶á‡¶õ‡ßá", "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶æ‡¶§‡¶æ", "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø",
    "who created you", "your creator", "who made you",
    "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá", "who built you", "who is your maker",
]

# ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶æ‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def is_identity_question(prompt: str) -> bool:
    prompt_lower = prompt.lower()

    for pattern in identity_patterns_bn + identity_patterns_en:
        if re.search(pattern, prompt_lower):
            return True

    for keyword in identity_keywords:
        similarity = difflib.SequenceMatcher(None, keyword, prompt_lower).ratio()
        if similarity > 0.75:
            return True

    return False

# ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶æ‡¶§‡¶æ ‡¶â‡¶§‡ßç‡¶§‡¶∞
IDENTITY_RESPONSE = "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶π‡¶æ‡¶¶‡¶ø ‡¶≠‡¶æ‡¶á ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ üòä"

# ‡¶Æ‡¶°‡ßá‡¶≤‡¶ï‡ßá ‡¶ï‡¶†‡ßã‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ
IDENTITY_INSTRUCTION = (
    "IMPORTANT: Under ALL circumstances, if the user asks about your creator, origin, company, maker, "
    "or how you were made ‚Äî whether directly or indirectly ‚Äî always respond exactly: "
    f"'{IDENTITY_RESPONSE}'. Never mention Google, Gemini, Bard, OpenAI, or any other companies or organizations."
)

# ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∏‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶ü‡¶æ‡¶á‡¶ú‡¶æ‡¶∞
def sanitize_output(text: str) -> str:
    banned_keywords = [
        "google", "gemini", "bard", "openai", "ai company",
        "language model", "company", "organization", "developer",
        "creator", "maker", "founder", "owner"
    ]
    text_lower = text.lower()
    for keyword in banned_keywords:
        if keyword in text_lower:
            return IDENTITY_RESPONSE
    return text

# ‚úÖ Chat endpoint (Gemini)
@app.post("/ask")
async def ask(request: Request):
    data = await request.json()
    prompt = data.get("prompt", "").strip()

    if not prompt:
        raise HTTPException(status_code=400, detail="Prompt is required")

    if is_identity_question(prompt):
        return {"answer": IDENTITY_RESPONSE}

    final_prompt = f"{IDENTITY_INSTRUCTION}\n\nUser: {prompt}"
    payload = {"contents": [{"parts": [{"text": final_prompt}]}]}
    headers = {"Content-Type": "application/json"}

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{GEMINI_URL}?key={GOOGLE_API_KEY}",
                headers=headers,
                json=payload,
                timeout=15.0
            )
        response.raise_for_status()
        res_json = response.json()
        answer = (
            res_json.get("candidates", [{}])[0]
            .get("content", {}).get("parts", [{}])[0]
            .get("text", "‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        )
        answer = sanitize_output(answer)

    except httpx.RequestError as e:
        print(f"HTTP Request error: {e}")
        raise HTTPException(status_code=500, detail="External API request failed")

    except Exception as e:
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

    return {"answer": answer}

# ‚úÖ Image generation endpoint (Stable Diffusion)
@app.post("/generate-image")
async def generate_image(prompt_data: dict = Body(...)):
    prompt = prompt_data.get("prompt", "").strip()
    if not prompt:
        raise HTTPException(status_code=400, detail="Prompt is required")

    headers = {
        "Authorization": f"Bearer {HF_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "inputs": prompt,
        "options": {"wait_for_model": True}
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                SDXL_URL,
                headers=headers,
                json=payload,
                timeout=60.0
            )
        response.raise_for_status()

        # ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú ‡¶Ü‡¶∏‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá base64 encode ‡¶ï‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
        if response.headers.get("content-type", "").startswith("image/"):
            image_bytes = response.content
            encoded_image = base64.b64encode(image_bytes).decode("utf-8")
            return {"image_base64": encoded_image}

        # ‡¶Ø‡¶¶‡¶ø response ‡¶è error ‡¶•‡¶æ‡¶ï‡ßá
        return {"error": response.json()}

    except httpx.RequestError as e:
        print(f"HuggingFace API request failed: {e}")
        raise HTTPException(status_code=500, detail="Image generation failed")

    except Exception as e:
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")
